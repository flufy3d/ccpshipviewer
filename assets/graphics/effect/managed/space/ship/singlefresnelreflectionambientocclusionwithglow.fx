<?xml version="1.0" ?>
<effect>
<shaders>
<shader name="main"><![CDATA[
precision highp float;uniform sampler2D DiffuseMap;uniform sampler2D GlowNormalSpecularMap;uniform samplerCube ReflectionMap;uniform sampler2D AmbientOcclusionMap;uniform vec4 MaterialSpecularCurve;uniform vec4 MaterialSpecularFactors;uniform vec4 GlowColor;uniform vec4 FresnelFactors;uniform vec4 ReflectionFactors;uniform float AODiffuseFactor;uniform vec3 u_sunDirection;uniform vec3 u_sunColor;uniform vec4 MaterialDiffuseColor;uniform float MaterialAmbientFactor;varying lowp vec2 v_TexCoord;varying lowp vec3 v_Normal;varying lowp vec3 v_Tangent;varying lowp vec3 v_Binormal;varying lowp vec3 v_EyeDirection;varying lowp vec2 v_TexCoord2;struct BaseLightingParams{float diffuse;float specularDot;float specularMaskedBrightness;vec3 reflectDir;vec3 normalWorld;};float x0(){return (texture2D(GlowNormalSpecularMap,v_TexCoord).b);}BaseLightingParams x1(){BaseLightingParams x2;vec3 x3;((x3.xy)=(((texture2D(GlowNormalSpecularMap,v_TexCoord).ga)*2.0)-1.0));((x3.z)=sqrt((1.0-dot((x3.xy),(x3.xy)))));((x2.normalWorld)=normalize((((v_Tangent*(x3.x))+(v_Binormal*(x3.y)))+(v_Normal*(x3.z)))));((x2.diffuse)=clamp(dot((x2.normalWorld),u_sunDirection),0.0,1.0));vec3 x4=normalize(v_EyeDirection);vec3 x5=normalize((u_sunDirection+x4));((x2.specularDot)=clamp(dot((x2.normalWorld),x5),0.0,1.0));((x2.specularMaskedBrightness)=x0());((x2.reflectDir)=reflect((-x4),(x2.normalWorld)));return x2;}vec4 x6(BaseLightingParams x7,vec4 x8,vec4 x9,float x10,vec2 x11,vec3 x12){float x13=(texture2D(AmbientOcclusionMap,v_TexCoord2).r);vec3 x14=(x13*vec3(x10,x10,x10));float x15=(1.0-(AODiffuseFactor*(1.0-x13)));vec4 x16=(x8*x9);float x17=(((x12.z)*pow((x7.specularDot),(x12.x)))+pow((x7.specularDot),(x12.y)));(x17*=(x7.specularMaskedBrightness));vec3 x18=(((x16.rgb)*(((((x7.diffuse)+((x11.y)*x17))*u_sunColor)*x15)+x14))+(((x11.x)*x17)*u_sunColor));return vec4(x18,(x16.a));}vec3 x19(vec3 x20,vec3 x21,vec3 x22,vec2 x23){float x24=pow((1.0-abs(dot(x21,x22))),(x23.x));return (((x23.y)*x24)*x20);}vec3 x25(vec3 x26,vec3 x27,vec4 x28,samplerCube x29){vec3 x30=(textureCube(x29,x27).xyz);float x31=x0();float x32=clamp((((x28.w)*x31)+(x28.z)),0.0,1.0);vec3 x33=(x30*x32);return (x33*((x28.x)+((x28.y)*x26)));}void main(void ){BaseLightingParams x34=x1();vec4 x35=texture2D(DiffuseMap,v_TexCoord);vec4 x36=x6(x34,x35,MaterialDiffuseColor,MaterialAmbientFactor,(MaterialSpecularFactors.xy),(MaterialSpecularCurve.xyz));((x36.xyz)+=x25((x36.xyz),(x34.reflectDir),ReflectionFactors,ReflectionMap));((x36.xyz)+=x19((x36.xyz),normalize(v_EyeDirection),(x34.normalWorld),(FresnelFactors.xy)));float x37=(texture2D(DiffuseMap,v_TexCoord).a);((x36.rgb)+=((GlowColor.rgb)*vec3(x37,x37,x37)));((x36.a)=1.0);(gl_FragColor=x36);}
]]></shader>
<shader name="DoubleVS"><![CDATA[
precision highp float;uniform mat4 u_World;uniform mat4 u_ViewProjection;uniform vec3 u_EyePosition;attribute vec3 a_Position;attribute vec3 a_Normal;attribute vec3 a_Tangent;attribute vec3 a_Binormal;attribute vec2 a_TexCoord;attribute vec2 a_TexCoord1;varying lowp vec2 v_TexCoord;varying lowp vec3 v_Normal;varying lowp vec3 v_Tangent;varying lowp vec3 v_Binormal;varying lowp vec3 v_EyeDirection;varying lowp vec2 v_TexCoord2;void main(void ){(gl_Position=((u_ViewProjection*u_World)*vec4(a_Position,1.0)));(v_TexCoord=a_TexCoord);vec4 x0=(u_World*vec4(a_Position,1.0));(v_Normal=((u_World*vec4(a_Normal,0.0)).xyz));(v_Tangent=((u_World*vec4(a_Tangent,0.0)).xyz));(v_Binormal=((u_World*vec4(a_Binormal,0.0)).xyz));(v_EyeDirection=(u_EyePosition-(x0.xyz)));(v_TexCoord2=a_TexCoord1);}struct BaseLightingParams{float diffuse;float specularDot;float specularMaskedBrightness;vec3 reflectDir;vec3 normalWorld;};
]]></shader>
</shaders>
<techniques>
<technique name="default">
<pass name="p0" vertexShader="DoubleVS" fragmentShader="main">
</pass>
</technique>
</techniques>
</effect>
