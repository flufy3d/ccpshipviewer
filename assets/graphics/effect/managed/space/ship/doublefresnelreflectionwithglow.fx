<?xml version="1.0" ?>
<effect>
<shaders>
<shader name="StandardVS"><![CDATA[
precision highp float;uniform mat4 u_World;uniform mat4 u_ViewProjection;uniform vec3 u_EyePosition;attribute vec3 a_Position;attribute vec3 a_Normal;attribute vec3 a_Tangent;attribute vec3 a_Binormal;attribute vec2 a_TexCoord;varying lowp vec2 v_TexCoord;varying lowp vec3 v_Normal;varying lowp vec3 v_Tangent;varying lowp vec3 v_Binormal;varying lowp vec3 v_EyeDirection;void main(void ){(gl_Position=((u_ViewProjection*u_World)*vec4(a_Position,1.0)));(v_TexCoord=a_TexCoord);vec4 x0=(u_World*vec4(a_Position,1.0));(v_Normal=((u_World*vec4(a_Normal,0.0)).xyz));(v_Tangent=((u_World*vec4(a_Tangent,0.0)).xyz));(v_Binormal=((u_World*vec4(a_Binormal,0.0)).xyz));(v_EyeDirection=(u_EyePosition-(x0.xyz)));}struct BaseLightingParams{float diffuse;float specularDot;float specularMaskedBrightness;vec3 reflectDir;vec3 normalWorld;};
]]></shader>
<shader name="StandardFS"><![CDATA[
precision highp float;uniform sampler2D DiffuseMap;uniform sampler2D GlowNormalSpecularMap;uniform sampler2D MaskMap;uniform samplerCube ReflectionMap;uniform samplerCube MaskReflectionMap;uniform vec4 MaterialSpecularCurve;uniform vec4 MaterialSpecularFactors;uniform vec4 GlowColor;uniform vec4 FresnelFactors;uniform vec4 ReflectionFactors;uniform vec4 MaskDiffuseColor;uniform vec4 MaskSpecularCurve;uniform vec4 MaskSpecularFactors;uniform vec4 MaskReflectionFactors;uniform vec4 MaskFresnelFactors;uniform float MaskAmbientFactor;uniform vec3 u_sunDirection;uniform vec3 u_sunColor;uniform vec4 MaterialDiffuseColor;uniform float MaterialAmbientFactor;varying lowp vec2 v_TexCoord;varying lowp vec3 v_Normal;varying lowp vec3 v_Tangent;varying lowp vec3 v_Binormal;varying lowp vec3 v_EyeDirection;struct BaseLightingParams{float diffuse;float specularDot;float specularMaskedBrightness;vec3 reflectDir;vec3 normalWorld;};float x0(){return (texture2D(GlowNormalSpecularMap,v_TexCoord).b);}float x1(){return (texture2D(DiffuseMap,v_TexCoord).a);}BaseLightingParams x2(){BaseLightingParams x3;vec3 x4;((x4.xy)=(((texture2D(GlowNormalSpecularMap,v_TexCoord).ga)*2.0)-1.0));((x4.z)=sqrt((1.0-dot((x4.xy),(x4.xy)))));((x3.normalWorld)=normalize((((v_Tangent*(x4.x))+(v_Binormal*(x4.y)))+(v_Normal*(x4.z)))));((x3.diffuse)=clamp(dot((x3.normalWorld),u_sunDirection),0.0,1.0));vec3 x5=normalize(v_EyeDirection);vec3 x6=normalize((u_sunDirection+x5));((x3.specularDot)=clamp(dot((x3.normalWorld),x6),0.0,1.0));((x3.specularMaskedBrightness)=x0());((x3.reflectDir)=reflect((-x5),(x3.normalWorld)));return x3;}vec4 x7(BaseLightingParams x8,vec4 x9,vec4 x10,float x11,vec2 x12,vec3 x13){vec4 x14=(x9*x10);vec3 x15=((vec3(x11,x11,x11)*100.0)/255.0);float x16=(((x13.z)*pow((x8.specularDot),(x13.x)))+pow((x8.specularDot),(x13.y)));(x16*=(x8.specularMaskedBrightness));vec3 x17=(((x14.rgb)*((((x8.diffuse)+((x12.y)*x16))*u_sunColor)+x15))+(((x12.x)*x16)*u_sunColor));return vec4(x17,(x14.a));}vec3 x18(vec3 x19,vec3 x20,vec3 x21,vec2 x22){float x23=pow((1.0-abs(dot(x20,x21))),(x22.x));return (((x22.y)*x23)*x19);}vec3 x24(vec3 x25,vec3 x26,vec4 x27,samplerCube x28){vec3 x29=(textureCube(x28,x26).xyz);float x30=x0();float x31=clamp((((x27.w)*x30)+(x27.z)),0.0,1.0);vec3 x32=(x29*x31);return (x32*((x27.x)+((x27.y)*x25)));}void main(void ){BaseLightingParams x33=x2();vec4 x34=texture2D(DiffuseMap,v_TexCoord);vec4 x35=x7(x33,x34,MaterialDiffuseColor,MaterialAmbientFactor,(MaterialSpecularFactors.xy),(MaterialSpecularCurve.xyz));((x35.xyz)+=x24((x35.xyz),(x33.reflectDir),ReflectionFactors,ReflectionMap));((x35.xyz)+=x18((x35.xyz),normalize(v_EyeDirection),(x33.normalWorld),(FresnelFactors.xy)));vec4 x36=texture2D(MaskMap,v_TexCoord);float x37=(x36.a);if((x37!=0.0)){vec4 x38=x7(x33,x34,MaskDiffuseColor,MaskAmbientFactor,(MaskSpecularFactors.xy),(MaskSpecularCurve.xyz));((x38.rgb)+=x24((x38.rgb),(x33.reflectDir),MaskReflectionFactors,MaskReflectionMap));((x38.rgb)+=x18((x38.rgb),normalize(v_EyeDirection),(x33.normalWorld),(MaskFresnelFactors.xy)));((x35.rgb)=(((x35.rgb)*(1.0-x37))+((x38.rgb)*x37)));}float x39=x1();((x35.rgb)+=((GlowColor.rgb)*vec3(x39,x39,x39)));((x35.a)=1.0);(gl_FragColor=x35);}
]]></shader>
</shaders>
<techniques>
<technique name="default">
<pass name="p0" vertexShader="StandardVS" fragmentShader="StandardFS">
</pass>
</technique>
</techniques>
</effect>
